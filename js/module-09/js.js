/*
  - –ï—Å–ª–∏ —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–∞—É–∑—ã, —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ button.js-start
    –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ 'Continue'. –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∫–ª–∏–∫–µ –≤ –Ω–µ–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏, 
    –∞ —Ç–µ–∫—Å—Ç –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ 'Pause'. –¢–æ –µ—Å—Ç—å –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –Ω–∞–∂–∞—Ç–∏—è 'Pause' –ø—Ä–æ—à–ª–æ 6 —Å–µ–∫—É–Ω–¥ 
    —Å–æ —Å—Ç–∞—Ä—Ç–∞, –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ 'Continue' 10 —Å–µ–∫—É–Ω–¥ —Å–ø—É—Å—Ç—è, —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ 
    —Å 6 —Å–µ–∫—É–Ω–¥, –∞ –Ω–µ —Å 16. 
    
    üîî –ü–æ–¥—Å–∫–∞–∑–∫–∞: —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤—Ä–µ–º—è —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–∞—É–∑—ã –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ 
                  –ø—Ä–∏ —Ä–∞—Å—Å—á–µ—Ç–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –æ—Ç–Ω–∏–º–∞—è
                  —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞.
    
  - –ï—Å–ª–∏ —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–∞—É–∑—ã, –∫–Ω–æ–ø–∫–∞ 
    button.js-reset –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–∞ (–Ω–∞ –Ω–µ–µ –º–æ–∂–Ω–æ –∫–ª–∏–∫–Ω—É—Ç—å), –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    disabled. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏ –∫–ª–∏–∫–µ - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∏ —Å–±—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª–µ–π –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    
  - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–Ω–æ–ø–∫–∏ button.js-take-lap –ø—Ä–∏ –∫–ª–∏–∫–µ - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä–∞ 
    –≤ –º–∞—Å—Å–∏–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ ul.js-laps –Ω–æ–≤–æ–≥–æ li —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ xx:xx.x
*/

// 

const watches = document.querySelector('.watches');

class Stopwatch {
  constructor({ watches }) {    
    this.watches = watches;
    this.createTimer()
    this.startBtn = this.watches.querySelector('.js-start');
    this.lapBtn = this.watches.querySelector('.js-take-lap');
    this.resetBtn = this.watches.querySelector('.js-reset');
    this.timerContent = this.watches.querySelector('.js-time');
    this.listLaps = this.watches.querySelector('.js-laps');
    this.startTime = null;
    this.deltaTime = null;
    this.id = null;
    this.isActive = false;
    this.startBtn.addEventListener('click', this.handleStartTimer.bind(this));
    this.resetBtn.addEventListener('click', this.hadleResetTimer.bind(this));
    this.lapBtn.addEventListener('click', this.hadleLapTimer.bind(this));
  }
  createTimer() {
    const bodyWatch = `<div class="stopwatch">
                      <p class="time js-time">00:00.0</p>
                      <button class="btn js-start">Start</button>
                      <button class="btn js-take-lap">Lap</button>
                      <button class="btn js-reset">Reset</button>
                      </div>
                      <ul class="laps js-laps"></ul>`;
    this.watches.innerHTML += bodyWatch;
  }
  handleStartTimer({ target }) {
    if (!this.isActive) {
      this.setActiveBtn(target);
      this.startTick(target);
      this.startBtn.textContent = 'Pause';
    } else {
      this.pauseTick(target);
      this.startBtn.textContent = 'Continue';
    }
  }
  startTick(target) {
    if (this.isActive) return;
    this.isActive = true;
    this.startTime = Date.now() - this.deltaTime;
    this.id = setInterval(() => {
      const currentTime = Date.now();
      this.deltaTime = currentTime - this.startTime;
      this.updateClockface(this.deltaTime);
    }, 100);
  }
  pauseTick(target) {
    clearInterval(this.id);
    this.isActive = false;
  }

  hadleResetTimer({ target }) {
    clearInterval(this.id);
    this.isActive = false;
    this.setActiveBtn(target);
    this.deltaTime = 0;
    this.updateClockface(this.deltaTime);
    this.startBtn.textContent = 'Start';
    this.listLaps.innerHTML = null;
    this.startTime = null;
  }

  hadleLapTimer(time) {
    if (!this.isActive) return;
    const item = document.createElement('li');
    item.textContent = this.timerContent.textContent;
    this.listLaps.append(item);
  }
  updateClockface(time) {
    const formattedTime = this.getFormatedTime(time);
    this.timerContent.textContent = formattedTime;
  }
  getFormatedTime(mls) {
    const date = new Date(mls);
    let min = date.getMinutes();
    let sec = date.getSeconds();
    let ms = parseInt(date.getMilliseconds() / 100);
    if (min < 10) {
      min = `0${min}`;
    }
    if (sec < 10) {
      sec = `0${sec}`;
    }
    return `${min}:${sec}.${ms}`;
  }

  setActiveBtn(target) {
    if (target.classList.contains('active')) {
      return;
    }
    this.startBtn.classList.remove('active');
    this.resetBtn.classList.remove('active');

    target.classList.add('active');
  }
}

const firstTimer = new Stopwatch({
  watches: watches,
});
